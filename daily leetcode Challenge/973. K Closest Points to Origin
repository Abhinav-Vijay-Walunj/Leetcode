class Solution {
private:
    int sqdist(vector<int>& point)
    {
        return point[0]*point[0]+point[1]*point[1];
    }
public:
    vector<vector<int>> kClosest(vector<vector<int>>& points, int k) {
        priority_queue<pair<int,int>> pq;
        for(int i=0;i<points.size();i++)
        {
            pair<int,int> entry={sqdist(points[i]),i};
            if(pq.size()<k)
            {
                pq.push(entry);
            }
            else if(entry.first < pq.top().first)
            {
                pq.pop();
                pq.push(entry);
            }
        }
        vector<vector<int>> ans;
        while(!pq.empty())
        {
            int entryind=pq.top().second;
            pq.pop();
            ans.push_back(points[entryind]);
                  
        }
    return ans;
    }
};
